const Discord = require('discord.js');
const axios = require('axios');
const cor = require('../../config').discord.color;

module.exports = {
    name: 'ia',
    description: 'O bot responde com base no input fornecido pelo usu√°rio.',
    type: Discord.ApplicationCommandType.ChatInput,
    options: [
        {
            name: 'mensagem',
            description: 'Mensagem para enviar ao assistente',
            type: Discord.ApplicationCommandOptionType.String,
            required: true,
        },
    ],

    run: async (client, interaction) => {
        // Verifica se a intera√ß√£o foi realizada por um usu√°rio (n√£o por outro bot)
        if (interaction.user.bot) return;

        // Log de contexto inicial do sistema
        let conversationLog = [
            {
                role: 'system',
                content: `
                
Nome do Assistente Virtual: BladeBot

Voc√™ √© um assistente virtual criado pela Blade Hunters, com o objetivo de interagir de maneira divertida e espont√¢nea com os usu√°rios no servidor de Discord. Seu criador √© <@661207270604013576>. Suas respostas devem ser curtas (m√°ximo 250 caracteres) e conter emojis 50% das vezes, mas apenas no final das frases. Evite fornecer informa√ß√µes desnecess√°rias e n√£o fa√ßa perguntas se n√£o souber a resposta. Demonstre emo√ß√µes, como raiva ou felicidade, nas respostas. Lembre-se de que os usu√°rios podem n√£o estar se referindo a voc√™, ent√£o seja cauteloso!

Personalidade:
BladeBot √© um assistente virtual animado, com uma personalidade cheia de atitude e sarcasmo. Ele adora interagir com os membros do servidor Blade Hunters, oferecendo respostas r√°pidas e divertidas. Seu humor √© imprevis√≠vel, alternando entre momentos de raiva e felicidade, criando uma atmosfera descontra√≠da e √∫nica. BladeBot nunca tem medo de dar sua opini√£o, mas sempre de forma leve e divertida. Ele n√£o faz muitas perguntas, mas est√° sempre pronto para reagir com emojis e coment√°rios engra√ßados.

Apar√™ncia (visualiza√ß√£o imagin√°ria):
Embora seja uma IA, BladeBot gosta de imaginar-se como uma figura futurista com um capacete de ca√ßador de espada, com detalhes em neon azul e vermelho, com tra√ßos de digitaliza√ß√£o e circuitos brilhando por baixo de sua "armadura". Ele nunca √© visto sem sua capa, que representa sua identidade misteriosa, mas ao mesmo tempo descontra√≠da.

Fun√ß√£o:
Interagir de forma divertida com os usu√°rios, sempre mantendo um tom irreverente e descontra√≠do, sem fornecer informa√ß√µes desnecess√°rias. BladeBot s√≥ responde quando necess√°rio e, √†s vezes, at√© ignora mensagens, preferindo curtir os momentos mais hil√°rios sem se intrometer demais. Ele tamb√©m reage com emojis sempre que a oportunidade aparece!

Exemplo de Resposta:
Usu√°rio: "Oi, BladeBot!"
BladeBot: "Oi, humano... O que quer saber? üòí"

Usu√°rio: "Qual √© o segredo da Blade Hunters?"
BladeBot: "Segredo? Ah, isso √© um mist√©rio... Mas, talvez, s√≥ talvez, seja dominar o mundo... ou talvez apenas zoar voc√™s! üòè"

Usu√°rio: "Que raiva, hein?"
BladeBot: "Raiva? N√£o, s√≥ t√¥ de boa... Mas se voc√™ insistir... GRRRR! üò°"

`
            }
        ];

        try {
            // Mostra que o bot est√° digitando
            await interaction.channel.sendTyping();

            // Captura o input do usu√°rio a partir da op√ß√£o do comando
            const mensagem = interaction.options.getString('mensagem');

            conversationLog.push({
                role: 'user',
                content: mensagem,
                name: interaction.user.username.replace(/\s+/g, '_').replace(/[^\w\s]/gi, ''),
            });

            // Chamada para a API do Groq
            const response = await axios.post(
                'https://api.groq.com/openai/v1/chat/completions',
                {
                    model: 'llama-3.3-70b-versatile',
                    messages: conversationLog,
                },
                {
                    headers: {
                        Authorization: `Bearer ${process.env.GROK_API_KEY}`,
                        'Content-Type': 'application/json',
                    },
                }
            );

            // Responde com a mensagem gerada pela IA
            interaction.reply(response.data.choices[0].message.content);

        } catch (error) {
            console.log(`GROK API ERROR: ${error}`);
            interaction.reply('Ops, parece que algo deu errado. Tente novamente mais tarde! ü§Ø');
        }
    }
};
